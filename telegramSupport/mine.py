from telegram import Update
from telegram.constants import ParseMode
from telegram.ext import (
    ApplicationBuilder,
    CommandHandler,
    ContextTypes,
    MessageHandler,
    filters,
)
import datetime
import os
import sys
import asyncio
from telegram.error import Conflict

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º keep_alive —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
try:
    from keep_alive import keep_alive
    USE_KEEP_ALIVE = True
except ImportError:
    USE_KEEP_ALIVE = False

TELEGRAM_TOKEN = "8087167425:AAGmHlcpIzO-iQ5kWgP33Tx-f7kED_wdSew"
ADMIN_GROUP_ID = -1002531818197  # –û–±—ã—á–Ω–∞—è –≥—Ä—É–ø–ø–∞ —Ç–∏–∫–µ—Ç–æ–≤
HIGH_ADMIN_GROUP_ID = -1002535654536  # –ì—Ä—É–ø–ø–∞ –≤—ã—Å—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏

ADMINS = {
    5425914820: "NikitusPROFUS",
}

HIGH_ADMINS = {
    5425914820: "NikitusPROFUS",
}

active_tickets = {
}  # user_id: {thread_id, current_admin, timeout_task, group_id}
active_tickets_high = {}  # user_id: {thread_id, current_admin, timeout_task}

banned_users = {}
started_users = set(
)  # –ú–Ω–æ–∂–µ—Å—Ç–≤–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, –∫–æ—Ç–æ—Ä—ã–µ —É–∂–µ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ /start


def is_banned(user_id: int) -> bool:
    ban_expire = banned_users.get(user_id)
    if ban_expire and ban_expire > datetime.datetime.now():
        return True
    if ban_expire and ban_expire <= datetime.datetime.now():
        del banned_users[user_id]
    return False


async def log_action(context: ContextTypes.DEFAULT_TYPE, text: str):
    # –õ–æ–≥–∏ —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø—É –≤—ã—Å—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
    await context.bot.send_message(chat_id=HIGH_ADMIN_GROUP_ID,
                                   text=f"üìù {text}")


async def pin_commands(context: ContextTypes.DEFAULT_TYPE, chat_id: int,
                       thread_id: int):
    if chat_id == HIGH_ADMIN_GROUP_ID:
        # –í –≥—Ä—É–ø–ø–µ –≤—ã—Å—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –Ω–µ—Ç –∫–æ–º–∞–Ω–¥—ã –ø–µ—Ä–µ–¥–∞—á–∏ —Ç–∏–∫–µ—Ç–∞
        commands_text = ("/takeReport ‚Äî –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é\n"
                         "/closeReport ‚Äî –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ\n"
                         "/banReport ‚Äî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 7 –¥–Ω–µ–π")
    else:
        # –í –æ–±—ã—á–Ω–æ–π –≥—Ä—É–ø–ø–µ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏ –µ—Å—Ç—å –≤—Å–µ –∫–æ–º–∞–Ω–¥—ã
        commands_text = ("/takeReport ‚Äî –ü—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –æ–±—Ä–∞—â–µ–Ω–∏—é\n"
                         "/closeReport ‚Äî –ó–∞–∫—Ä—ã—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏–µ\n"
                         "/banReport ‚Äî –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –Ω–∞ 7 –¥–Ω–µ–π\n"
                         "/nextStepReport ‚Äî –ü–µ—Ä–µ–¥–∞—Ç—å –Ω–∞ –≤—ã—Å—à—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é")

    pin_msg = await context.bot.send_message(chat_id=chat_id,
                                             message_thread_id=thread_id,
                                             text=commands_text)
    await context.bot.pin_chat_message(chat_id=chat_id,
                                       message_id=pin_msg.message_id)


async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if update.message.chat.type != 'private':
        return

    user = update.effective_user

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ –∫–æ–º–∞–Ω–¥—É /start
    if user.id in started_users:
        await update.message.reply_text(
            "–í—ã —É–∂–µ –ø–æ–ª—É—á–∏–ª–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –±–æ—Ç–∞.\n"
            "–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É `/support`")
        return

    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ø–∏—Å–æ–∫ —Ç–µ—Ö, –∫—Ç–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª /start
    started_users.add(user.id)

    welcome_text = f"""
üëã –î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, {user.first_name}!

ü§ñ **–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º –ø–æ–¥–¥–µ—Ä–∂–∫–∏:**

üìù **–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—Ä–∞—â–µ–Ω–∏—è:**
‚Ä¢ –û—Ç–ø—Ä–∞–≤—å—Ç–µ –∫–æ–º–∞–Ω–¥—É `/support` –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
‚Ä¢ –û–ø–∏—à–∏—Ç–µ –≤–∞—à—É –ø—Ä–æ–±–ª–µ–º—É –∏–ª–∏ –≤–æ–ø—Ä–æ—Å
‚Ä¢ –û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞

üí¨ **–û–±—â–µ–Ω–∏–µ —Å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º:**
‚Ä¢ –ü–æ—Å–ª–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è, —Ñ–æ—Ç–æ, –¥–æ–∫—É–º–µ–Ω—Ç—ã
‚Ä¢ –í—Å–µ –≤–∞—à–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –ø–µ—Ä–µ–¥–∞–Ω—ã –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä—É
‚Ä¢ –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–º–æ–∂–µ—Ç –æ—Ç–≤–µ—á–∞—Ç—å –≤–∞–º –Ω–∞–ø—Ä—è–º—É—é

‚ö†Ô∏è **–í–∞–∂–Ω—ã–µ –ø—Ä–∞–≤–∏–ª–∞:**
‚Ä¢ –û–¥–Ω–æ–≤—Ä–µ–º–µ–Ω–Ω–æ –º–æ–∂–Ω–æ –∏–º–µ—Ç—å —Ç–æ–ª—å–∫–æ –æ–¥–∏–Ω –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç
‚Ä¢ –ë—É–¥—å—Ç–µ –≤–µ–∂–ª–∏–≤—ã –∏ –æ–ø–∏—Å—ã–≤–∞–π—Ç–µ –ø—Ä–æ–±–ª–µ–º—É –ø–æ–¥—Ä–æ–±–Ω–æ
‚Ä¢ –ù–µ —Å–ø–∞–º—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏

üìú **–î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –æ–±—Ä–∞—â–µ–Ω–∏—è –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ:** `/support`
"""

    await update.message.reply_text(welcome_text,
                                    parse_mode=ParseMode.MARKDOWN)


async def support(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∫–æ–º–∞–Ω–¥–∞ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –≤ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö
    if update.message.chat.type != 'private':
        return

    user = update.effective_user
    if is_banned(user.id):
        await update.message.reply_text(
            "<blockquote>–í—ã –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –∏ –Ω–µ –º–æ–∂–µ—Ç–µ —Å–æ–∑–¥–∞–≤–∞—Ç—å –æ–±—Ä–∞—â–µ–Ω–∏—è.</blockquote>"
        )
        return
    if user.id in active_tickets or user.id in active_tickets_high:
        await update.message.reply_text("–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –æ—Ç–∫—Ä—ã—Ç—ã–π —Ç–∏–∫–µ—Ç.")
        return

    topic = await context.bot.create_forum_topic(chat_id=ADMIN_GROUP_ID,
                                                 name=f"ID: {user.id}")
    thread_id = topic.message_thread_id

    active_tickets[user.id] = {
        "thread_id": thread_id,
        "current_admin": None,
        "timeout_task": None,
        "group_id": ADMIN_GROUP_ID,
    }

    await pin_commands(context, ADMIN_GROUP_ID, thread_id)

    await update.message.reply_text(
        "–í—ã —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–ª–∏ –æ–±—Ä–∞—â–µ–Ω–∏–µ!\n<blockquote>–û–∂–∏–¥–∞–π—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.</blockquote>",
        parse_mode=ParseMode.HTML)

    await log_action(context,
                     f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user.id} —Å–æ–∑–¥–∞–ª —Ç–∏–∫–µ—Ç #{thread_id}")


async def relay_messages(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user = update.effective_user
    if user.id in active_tickets:
        ticket = active_tickets[user.id]
    elif user.id in active_tickets_high:
        ticket = active_tickets_high[user.id]
    else:
        return

    thread_id = ticket["thread_id"]
    group_id = ticket.get(
        "group_id", HIGH_ADMIN_GROUP_ID)  # –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤—ã—Å—à–∞—è –≥—Ä—É–ø–ø–∞ –µ—Å–ª–∏ –Ω–µ—Ç

    msg = update.message
    try:
        if msg.text:
            await context.bot.send_message(chat_id=group_id,
                                           message_thread_id=thread_id,
                                           text=msg.text)
        elif msg.photo:
            await context.bot.send_photo(chat_id=group_id,
                                         message_thread_id=thread_id,
                                         photo=msg.photo[-1].file_id,
                                         caption=msg.caption or None)
        elif msg.document:
            await context.bot.send_document(chat_id=group_id,
                                            message_thread_id=thread_id,
                                            document=msg.document.file_id,
                                            caption=msg.caption or None)
        elif msg.sticker:
            await context.bot.send_sticker(chat_id=group_id,
                                           message_thread_id=thread_id,
                                           sticker=msg.sticker.file_id)
        elif msg.video:
            await context.bot.send_video(chat_id=group_id,
                                         message_thread_id=thread_id,
                                         video=msg.video.file_id,
                                         caption=msg.caption or None)
        elif msg.voice:
            await context.bot.send_voice(chat_id=group_id,
                                         message_thread_id=thread_id,
                                         voice=msg.voice.file_id,
                                         caption=msg.caption or None)
    except:
        if user.id in active_tickets:
            del active_tickets[user.id]
        if user.id in active_tickets_high:
            del active_tickets_high[user.id]


async def take_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = update.effective_user.id
    if admin_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    thread_id = update.message.message_thread_id

    # –ò—â–µ–º —Ç–∏–∫–µ—Ç –≤ –æ–±–µ–∏—Ö –≥—Ä—É–ø–ø–∞—Ö
    found = False
    for user_id, data in active_tickets.items():
        if data["thread_id"] == thread_id:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Ç–µ–∫—É—â–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
            if data["current_admin"] == admin_id:
                await update.message.reply_text("–í—ã —É–∂–µ –≤–µ–¥–µ—Ç–µ —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ.")
                return

            data["current_admin"] = admin_id
            try:
                await context.bot.edit_forum_topic(
                    chat_id=ADMIN_GROUP_ID,
                    message_thread_id=thread_id,
                    name=f"ID: {user_id} - {ADMINS[admin_id]}")
            except:
                pass

            await context.bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                message_thread_id=thread_id,
                text=f"<b>{ADMINS[admin_id]}</b> —Ç–µ–ø–µ—Ä—å –≤–µ–¥–µ—Ç —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ.",
                parse_mode=ParseMode.HTML)
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=
                    f"<blockquote>–ö –≤–∞—à–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMINS[admin_id]}.</blockquote>",
                    parse_mode=ParseMode.HTML)
            except:
                pass
            await log_action(
                context,
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMINS[admin_id]} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Ç–∏–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
            )
            found = True
            break

    if not found:
        for user_id, data in active_tickets_high.items():
            if data["thread_id"] == thread_id:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —É–∂–µ —Ç–µ–∫—É—â–∏–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º —ç—Ç–æ–≥–æ —Ç–∏–∫–µ—Ç–∞
                if data["current_admin"] == admin_id:
                    await update.message.reply_text(
                        "–í—ã —É–∂–µ –≤–µ–¥–µ—Ç–µ —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ.")
                    return

                data["current_admin"] = admin_id
                try:
                    await context.bot.edit_forum_topic(
                        chat_id=HIGH_ADMIN_GROUP_ID,
                        message_thread_id=thread_id,
                        name=f"ID: {user_id} - {ADMINS[admin_id]}")
                except:
                    pass

                await context.bot.send_message(
                    chat_id=HIGH_ADMIN_GROUP_ID,
                    message_thread_id=thread_id,
                    text=
                    f"<b>{ADMINS[admin_id]}</b> —Ç–µ–ø–µ—Ä—å –≤–µ–¥–µ—Ç —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ.",
                    parse_mode=ParseMode.HTML)
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=
                        f"<blockquote>–ö –≤–∞—à–µ–º—É –æ–±—Ä–∞—â–µ–Ω–∏—é –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMINS[admin_id]}.</blockquote>",
                        parse_mode=ParseMode.HTML)
                except:
                    pass
                await log_action(
                    context,
                    f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMINS[admin_id]} –ø–æ–¥–∫–ª—é—á–∏–ª—Å—è –∫ —Ç–∏–∫–µ—Ç—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                )
                found = True
                break


async def close_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = update.effective_user.id
    if admin_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    thread_id = update.message.message_thread_id

    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–µ –≥—Ä—É–ø–ø—ã
    for tickets_dict, group_id in [(active_tickets, ADMIN_GROUP_ID),
                                   (active_tickets_high, HIGH_ADMIN_GROUP_ID)]:
        for user_id, data in tickets_dict.items():
            if data["thread_id"] == thread_id:
                if data["current_admin"] != admin_id:
                    await update.message.reply_text(
                        "–¢—ã –Ω–µ –≤–µ–¥–µ—à—å —ç—Ç–æ –æ–±—Ä–∞—â–µ–Ω–∏–µ.")
                    return

                if data["timeout_task"]:
                    data["timeout_task"].cancel()

                del tickets_dict[user_id]

                await context.bot.send_message(
                    chat_id=group_id,
                    message_thread_id=thread_id,
                    text=f"<b>{ADMINS[admin_id]}</b> –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç.",
                    parse_mode=ParseMode.HTML)
                try:
                    await context.bot.send_message(
                        chat_id=user_id,
                        text=
                        f"<blockquote>–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMINS[admin_id]} –∑–∞–∫—Ä—ã–ª –≤–∞—à–µ –æ–±—Ä–∞—â–µ–Ω–∏–µ!</blockquote>",
                        parse_mode=ParseMode.HTML)
                except:
                    pass
                await context.bot.delete_forum_topic(
                    chat_id=group_id, message_thread_id=thread_id)
                await log_action(
                    context,
                    f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMINS[admin_id]} –∑–∞–∫—Ä—ã–ª —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
                )
                return


async def ban_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    admin_id = update.effective_user.id

    if admin_id not in ADMINS:
        await update.message.reply_text("–£ –≤–∞—Å –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    thread_id = update.message.message_thread_id

    # –ò—â–µ–º —Ç–∏–∫–µ—Ç –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ
    for user_id, data in list(active_tickets.items()):
        if data["thread_id"] == thread_id:
            ban_until = datetime.datetime.now() + datetime.timedelta(days=7)
            banned_users[user_id] = ban_until

            if data["timeout_task"]:
                data["timeout_task"].cancel()
            del active_tickets[user_id]

            await context.bot.send_message(
                chat_id=ADMIN_GROUP_ID,
                message_thread_id=thread_id,
                text=
                f"<b>{ADMINS[admin_id]}</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ 7 –¥–Ω–µ–π.",
                parse_mode=ParseMode.HTML)
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=
                    f"–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –Ω–∞ 7 –¥–Ω–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {ADMINS[admin_id]}."
                )
            except:
                pass
            await context.bot.delete_forum_topic(chat_id=ADMIN_GROUP_ID,
                                                 message_thread_id=thread_id)
            await log_action(
                context,
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMINS[admin_id]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ 7 –¥–Ω–µ–π"
            )
            return

    # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –≤ –æ—Å–Ω–æ–≤–Ω–æ–π –≥—Ä—É–ø–ø–µ, –∏—â–µ–º –≤ –≥—Ä—É–ø–ø–µ –≤—ã—Å—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
    for user_id, data in list(active_tickets_high.items()):
        if data["thread_id"] == thread_id:
            ban_until = datetime.datetime.now() + datetime.timedelta(days=7)
            banned_users[user_id] = ban_until

            if data["timeout_task"]:
                data["timeout_task"].cancel()
            del active_tickets_high[user_id]

            await context.bot.send_message(
                chat_id=HIGH_ADMIN_GROUP_ID,
                message_thread_id=thread_id,
                text=
                f"<b>{ADMINS[admin_id]}</b> –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ 7 –¥–Ω–µ–π.",
                parse_mode=ParseMode.HTML)
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=
                    f"–í—ã –±—ã–ª–∏ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã –≤ –ø–æ–¥–¥–µ—Ä–∂–∫–µ –Ω–∞ 7 –¥–Ω–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º {ADMINS[admin_id]}."
                )
            except:
                pass
            await context.bot.delete_forum_topic(chat_id=HIGH_ADMIN_GROUP_ID,
                                                 message_thread_id=thread_id)
            await log_action(
                context,
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMINS[admin_id]} –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ 7 –¥–Ω–µ–π"
            )
            return

    await update.message.reply_text(
        "–¢–∏–∫–µ—Ç –¥–ª—è –±–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Ç–µ–∫—É—â–∏—Ö –≥—Ä—É–ø–ø–∞—Ö.")


async def unban_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –†–∞–∑–±–∞–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç –¢–û–õ–¨–ö–û –≤ –≥—Ä—É–ø–ø–µ –≤—ã—Å—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
    if update.message.chat_id != HIGH_ADMIN_GROUP_ID:
        await update.message.reply_text(
            "–†–∞–∑–±–∞–Ω –¥–æ—Å—Ç—É–ø–µ–Ω —Ç–æ–ª—å–∫–æ –≤ –≥—Ä—É–ø–ø–µ –≤—ã—Å—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏.")
        return

    admin_id = update.effective_user.id
    if admin_id not in ADMINS:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    if not context.args:
        await update.message.reply_text("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: /unbanReport <user_id>"
                                        )
        return

    try:
        user_id = int(context.args[0])
    except ValueError:
        await update.message.reply_text("–ù–µ–≤–µ—Ä–Ω—ã–π user_id.")
        return

    if user_id not in banned_users:
        await update.message.reply_text(
            "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –≤ —Å–ø–∏—Å–∫–µ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö.")
        return

    del banned_users[user_id]

    await update.message.reply_text(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω.")

    await log_action(
        context,
        f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMINS[admin_id]} —Ä–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞–ª –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}"
    )


async def next_step_report(update: Update, context: ContextTypes.DEFAULT_TYPE):
    # –ü–µ—Ä–µ–¥–∞—á–∞ —Ç–∏–∫–µ—Ç–∞ –≤—ã—Å—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
    admin_id = update.effective_user.id
    if admin_id not in ADMINS:
        await update.message.reply_text("–£ —Ç–µ–±—è –Ω–µ—Ç –¥–æ—Å—Ç—É–ø–∞.")
        return

    thread_id = update.message.message_thread_id

    # –ò—â–µ–º —Ç–∏–∫–µ—Ç –≤ –æ–±—ã—á–Ω–æ–π –≥—Ä—É–ø–ø–µ
    for user_id, data in list(active_tickets.items()):
        if data["thread_id"] == thread_id:
            # –£–¥–∞–ª—è–µ–º —Ç–µ–º—É –∏–∑ –æ–±—ã—á–Ω–æ–π –≥—Ä—É–ø–ø—ã
            await context.bot.delete_forum_topic(chat_id=ADMIN_GROUP_ID,
                                                 message_thread_id=thread_id)

            # –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Ç–µ–º—É –≤ –≥—Ä—É–ø–ø–µ –≤—ã—Å—à–µ–π –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏–∏
            topic = await context.bot.create_forum_topic(
                chat_id=HIGH_ADMIN_GROUP_ID,
                name=f"ID: {user_id} - –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMINS[admin_id]}")
            new_thread_id = topic.message_thread_id

            # –ü–∏–Ω–≥—É–µ–º –∫–æ–º–∞–Ω–¥—ã –≤ –Ω–æ–≤–æ–π —Ç–µ–º–µ
            await pin_commands(context, HIGH_ADMIN_GROUP_ID, new_thread_id)

            active_tickets_high[user_id] = {
                "thread_id": new_thread_id,
                "current_admin": None,
                "timeout_task": None,
            }
            del active_tickets[user_id]

            await context.bot.send_message(
                chat_id=HIGH_ADMIN_GROUP_ID,
                message_thread_id=new_thread_id,
                text=
                f"<b>{ADMINS[admin_id]}</b> –ø–µ—Ä–µ–¥–∞–ª —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –≤—ã—Å—à—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é.",
                parse_mode=ParseMode.HTML)
            try:
                await context.bot.send_message(
                    chat_id=user_id,
                    text=
                    "<blockquote>–í–∞—à —Ç–∏–∫–µ—Ç –ø–µ—Ä–µ–¥–∞–Ω –Ω–∞ –≤—ã—Å—à—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é.</blockquote>",
                    parse_mode=ParseMode.HTML)
            except:
                pass

            await log_action(
                context,
                f"–ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä {ADMINS[admin_id]} –ø–µ—Ä–µ–¥–∞–ª —Ç–∏–∫–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –Ω–∞ –≤—ã—Å—à—É—é –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—é"
            )

            return


async def admin_relay(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.message.chat_id
    thread_id = update.message.message_thread_id
    sender_id = update.effective_user.id

    if chat_id == ADMIN_GROUP_ID:
        tickets_dict = active_tickets
    elif chat_id == HIGH_ADMIN_GROUP_ID:
        tickets_dict = active_tickets_high
    else:
        return

    for user_id, data in tickets_dict.items():
        if data["thread_id"] == thread_id and data[
                "current_admin"] == sender_id:
            msg = update.message
            try:
                if msg.text:
                    await context.bot.send_message(chat_id=user_id,
                                                   text=msg.text)
                elif msg.photo:
                    await context.bot.send_photo(chat_id=user_id,
                                                 photo=msg.photo[-1].file_id,
                                                 caption=msg.caption or None)
                elif msg.document:
                    await context.bot.send_document(
                        chat_id=user_id,
                        document=msg.document.file_id,
                        caption=msg.caption or None)
                elif msg.sticker:
                    await context.bot.send_sticker(chat_id=user_id,
                                                   sticker=msg.sticker.file_id)
                elif msg.video:
                    await context.bot.send_video(chat_id=user_id,
                                                 video=msg.video.file_id,
                                                 caption=msg.caption or None)
                elif msg.voice:
                    await context.bot.send_voice(chat_id=user_id,
                                                 voice=msg.voice.file_id,
                                                 caption=msg.caption or None)
            except:
                pass
            return


def main():
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–ø—É—â–µ–Ω –ª–∏ —É–∂–µ –¥—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä
    pid_file = '/tmp/telegram_bot.pid'

    if os.path.exists(pid_file):
        with open(pid_file, 'r') as f:
            old_pid = f.read().strip()
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∞–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–æ—Ü–µ—Å—Å
            os.kill(int(old_pid), 0)
            print(f"–ë–æ—Ç —É–∂–µ –∑–∞–ø—É—â–µ–Ω —Å PID {old_pid}")
            sys.exit(1)
        except (OSError, ValueError):
            # –ü—Ä–æ—Ü–µ—Å—Å –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω, —É–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–π PID —Ñ–∞–π–ª
            os.remove(pid_file)

    # –ó–∞–ø–∏—Å—ã–≤–∞–µ–º PID —Ç–µ–∫—É—â–µ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
    with open(pid_file, 'w') as f:
        f.write(str(os.getpid()))

    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º keep_alive –µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–µ–Ω
        if USE_KEEP_ALIVE:
            keep_alive()

        app = ApplicationBuilder().token(TELEGRAM_TOKEN).build()
        app.add_handler(CommandHandler("start", start))
        app.add_handler(CommandHandler("support", support))
        app.add_handler(CommandHandler("takeReport", take_report))
        app.add_handler(CommandHandler("closeReport", close_report))
        app.add_handler(CommandHandler("banReport", ban_report))
        app.add_handler(CommandHandler("unbanReport", unban_report))
        app.add_handler(CommandHandler("nextStepReport", next_step_report))

        app.add_handler(
            MessageHandler(filters.ChatType.PRIVATE & ~filters.COMMAND,
                           relay_messages))
        app.add_handler(
            MessageHandler(filters.ChatType.SUPERGROUP & ~filters.COMMAND,
                           admin_relay))

        print("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        app.run_polling(drop_pending_updates=True)

    except Conflict as e:
        print(f"–ö–æ–Ω—Ñ–ª–∏–∫—Ç: {e}")
        print("–î—Ä—É–≥–æ–π —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ —É–∂–µ –∑–∞–ø—É—â–µ–Ω. –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã.")
        sys.exit(1)
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        sys.exit(1)
    finally:
        # –£–¥–∞–ª—è–µ–º PID —Ñ–∞–π–ª –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
        if os.path.exists(pid_file):
            os.remove(pid_file)


if __name__ == '__main__':
    main()
